\documentclass[12pt]{article}
\usepackage{scrtime} % for \thistime (this package MUST be listed first!)
\usepackage[margin=1in]{geometry}
\usepackage{subfig}

%% Language and font encodings
\usepackage[english]{babel}
\usepackage[utf8x]{inputenc}
\usepackage[T1]{fontenc}

%% Useful packages
\usepackage{amsmath}
\usepackage{amsthm} % for theorems and proofs
\usepackage{amsfonts} % mathbb
\usepackage{graphicx}
\usepackage[colorinlistoftodos]{todonotes}
\definecolor{aqua}{RGB}{0, 128, 225}
\usepackage[colorlinks=true,citecolor=aqua,linkcolor=aqua,urlcolor=aqua]{hyperref}
\usepackage[nameinlink]{cleveref}
\usepackage{lineno}

\usepackage{fancyhdr,lastpage}
\pagestyle{fancy}
\fancyhf{} % clear all header and footer parameters
%%%\lhead{Student Name: \theblank{4cm}}
%%%\chead{}
%%%\rhead{Student Number: \theblank{3cm}}
%%%\lfoot{\small\bfseries\ifnum\thepage<\pageref{LastPage}{CONTINUED\\on next page}\else{LAST PAGE}\fi}
\lfoot{}
\cfoot{{\small\bfseries Page \thepage\ of \pageref{LastPage}}}
\rfoot{}
\renewcommand\headrulewidth{0pt} % Removes funny header line

\newcommand{\R}{{\cal R}}

\title{Synchrony and Persistence of Recurrent Epidemics (Supplementary Material)}
\author{\underline{\emph{Group Name}}: \texttt{{\color{blue}The Infective Collective}}\\
{}\\
\underline{\emph{Group Members}}: {\color{blue}Aurora Basinski-Ferris, Michael Chong, Daniel Park, Daniel Presta}}

\date{\today\ @ \thistime}

\begin{document}

<<echo=FALSE>>==
start.time <- proc.time()
@
\linenumbers
\maketitle

\section{Introduction}
This supplement contains the necessary code to reproduce the data and graphs in the main paper. We also include additional discussion and explanation of some of our methods and results.

\section{The Model}

\subsection{Construction of the model}

Here, we provide a detailed derivation of the model.
First, consider the following coupled seasonally forced SIR model consisting of $n$ patches:
\begin{equation}
\begin{aligned}
\frac{dS_i}{dt} &= \mu N - \left(\sum_{j=1}^n \beta(t) m_{ij} I_j + \mu\right) S_i \\
\frac{dI_i}{dt} &= \left(\sum_{j=1}^n \beta(t) m_{ij} I_j + \mu\right) S_i - (\mu  + \gamma) I_i\\
\frac{dR_i}{dt} &= \gamma I_i - \mu R_i
\end{aligned}
\end{equation}
where $S_i$, $I_i$ and $R_i$ are numbers of susceptible, infected and recovered individuals in patch $i$, respectively. 
$N$ is population size in every patch and is assumed to be constant. 
$\beta(t)$ is the transmission rate, $\gamma$ is the per capita recovery rate and $\mu$ is the per capita death rate as well as birth rate. 
$m_{ij}$ is the proportion of contacts from patch $j$ that are dispersed to patch $i$. 
The dispersal matrix is then given by $M = \left[m_{ij}\right]$ and we have $\sum_{i=1}^n m_{ij} = 1$. 
To allow for seasonal forcing, we model the transmission rate using a trigonometric function [CITE]:
\begin{equation}
\beta(t) = b_0 (1 + b_1 \cos(2 \pi t))
\end{equation}

Note that a susceptible individual in patch $i$ leaves the susceptible compartment at rate $\sum_{j=1}^n \beta(t) m_{ij} I_j + \mu$. We can view this quantity as hazard and obtain the probability that a susceptible individual survives during a time interval $(t, t + \Delta t)$:
\begin{equation}
\exp \left(-\int_{t}^{t + \Delta t} \sum_{j=1}^n \beta(s) m_{ij} I_j(s) + \mu d s \right),
\end{equation}
where for sufficiently small $\Delta t$, we can write
\begin{equation}
\int_{t}^{t + \Delta t} \sum_{j=1}^n \beta(s) m_{ij} I_j(s) + \mu d s \approx \left(\sum_{j=1}^n \beta(t) m_{ij} I_j(s) + \mu \right) \Delta t.
\end{equation}
Rearranging, number of individuals that leave the susceptible compartment after $\Delta$ time step is given by
\begin{equation}
S_{i, \tiny{\textrm{leave}}}(t) = \left(1 - \exp \left(-\left(\sum_{j=1}^n \beta(t) m_{ij} I_j(s) + \mu \right) \Delta t \right) \right) S_i(t)
\end{equation}
Assuming that the transmission rate and number of infected individuals stays constant over the interval $(t, t+\Delta)$, the probability that a susceptible individual leaves the compartment due to infection is given by 
\begin{equation}
\frac{\sum_{j=1}^n \beta(t) m_{ij} I_j(s)}{\sum_{j=1}^n \beta(t) m_{ij} I_j(s) + \mu}
\end{equation}
Incidence (i.e., number of suseptible individuals that become infected during $(t, t+\Delta t)$ interval) is then given by the product of above probability and $S_{i, \tiny{\textrm{leave}}}(t)$.
Similarly, an infected individual and a recovered individual suffer from constant hazard of $\gamma + \mu$ and $\mu$, respectively.
Since these rates are not time-dependent, these can each be translated into transition probabilities assuming exponentially distributed life time in each compartment, yielding
\begin{equation}
\begin{aligned}
I_{i, \tiny{\textrm{leave}}}(t) &= (1 - \exp(-(\gamma + \mu)\Delta t)) I_i(t) \\
R_{i, \tiny{\textrm{leave}}}(t) &= (1 - \exp(-\mu \Delta t)) R_i(t)
\end{aligned}
\end{equation}
Then, the full discrete time model is given by
\begin{equation}
\label{eq:discretedeterministic}
\begin{aligned}
S_{k}(t+\Delta t) &= b_k(t) + S_k(t) - S_{k, \tiny{\textrm{leave}}}(t)\\
I_{k}(t+\Delta t) &= i_k(t) + I_k(t) - I_{k, \tiny{\textrm{leave}}}(t)\\
R_{k}(t+\Delta t) &= r_k(t) + R_k(t) - R_{k, \tiny{\textrm{leave}}}(t)
\end{aligned}
\end{equation}
where $b_k(t)$, $i_k(t)$, and $r_k(t)$ represent number of new susceptible, infected, and recovered individuals that are produced between the interval $(t, t+\Delta t)$:
\begin{equation}
\begin{aligned}
i_k(t) &= \frac{\sum_{j=1}^n \beta(t) m_{ij} I_j(s)}{\sum_{j=1}^n \beta(t) m_{ij} I_j(s) + \mu} S_{k, \tiny{\textrm{leave}}}(t)\\
r_k(t) &= \frac{\gamma}{\gamma + \mu} R_{k, \tiny{\textrm{leave}}}(t)\\
b_k(t) &= S_{k, \tiny{\textrm{leave}}}(t) - i_k(t) + I_{k, \tiny{\textrm{leave}}}(t) - r_k(t)\\
\end{aligned}
\end{equation}

\subsection{Load packages}

Before we attempt any numerical analysis, we want to load all necessary pacakges first.

<<load, message=FALSE, warning=FALSE>>===
library(Rcpp)
library(deSolve)
library(tidyr)
library(dplyr)
library(ggplot2); theme_set(theme_bw(base_size = 12,
                                     base_family = "Times"))

if (.Platform$OS.type=="windows") {
    windowsFonts(Times=windowsFont("Times"))
} 

@

\subsection{Implementation of the model}

Implementation of the model is done using the \texttt{Rcpp} package.
The source code is too long to be display here. 
Interested readers should look at the source code \texttt{SIRmodel\_npatch.cpp}.
Before we perform any analysis, we have to load the model file:
<<load model>>==
sourceCpp("SIRmodel_npatch.cpp")
@

\subsection{Parameters}

Base parameters are stored as a list along with base initial conditions, which are equal to endemic equilibrium assuming a constant transmission rate. Note that \texttt{initfun} returns a list of states at the endemic equilibrium given a parameter.

<<param >>==
initfun <- function(param) {
    with(param,{
        epsilon <- mu/(mu+gamma)
        
        list(
            S=pop/R0,
            I=epsilon*(1-1/R0)*pop,
            R=pop-(1-R0-epsilon*(1-1/R0))
        )
    })
}

base.params <- list(
    R0=17,
    pop=1e6,
    b1=0.08,
    gamma=365/13,
    mu=0.02,
    dt=1/365,
    nsteps=365*100
)

base.init <- initfun(base.params)
@

\section{Bifurcation diagram}

In order to make a bifurcation diagram, we vary $\R_0$ from 1 to 20 every 0.2 steps. 
Then, for each $\R_0$, 20 simulations are run from random initial conditions for 4000 years to remove any transient behaviours that might be present.
Note that this simulation takes approximately 20 hours. Thus, we load a saved file instead.

<<bifurcation>>==
if (file.exists("bifurcation.rda")) {
    load("bifurcation.rda")
} else {
    nsim <- 20
    R0vec <- seq(1, 20, by=0.2)

    set.seed(101)
    init <- data.frame(
        S=seq(from=0, to=0.1, length.out=nsim) * base.params[["pop"]],
        I=seq(from=0, to=0.0001, length.out=nsim) * base.params[["pop"]]
    )

    init[] <- apply(init, 2, sample)
    init$R <- base.params[["pop"]] - (init$S + init$I)

    blist <- vector('list', length(R0vec))

    for (R in R0vec) {
    
        pp <- base.params
        pp[["R0"]] <- R
        pp[["nsteps"]] <- 365 * 4000 
        
        blist[[which(R0vec==R)]] <- lapply(1:nsim, function(x){
            ii <- init[x,]
            df <- SIRmodel_npatch(pp, ii, matrix(1), term_time)
            prev <- tail(df$I[df$time%%1==0], 100)/pp[["pop"]]
            
            data.frame(
                prevalence=prev,
                R0=R
            )
        })
            save("blist", file="bifurcation.rda")
        }

    save("blist", file="bifurcation.rda")

    }
@

Once the simulation is done, we can clean the simulation data to generate a data frame that can be used to create a bifurcation diagram:

<<bifur_clean>>==
bdf <- blist %>%
    lapply(bind_rows, .id="sim") %>%
    bind_rows

bifur_df <- bdf %>%
    group_by(sim, R0) %>%
    filter(prevalence > 0) %>%
    filter(!duplicated(prevalence)) %>%
    group_by(R0) %>%
    filter(!duplicated(round(prevalence, 10))) %>%
    group_by(sim, R0) %>%
    mutate(
        i=n()
    ) %>%
    group_by(R0, i) %>%
    mutate(
        prevalence=ifelse(i==1, mean(prevalence), prevalence)
    ) %>%
    filter(!duplicated(prevalence)) %>%
    group_by() %>%
    mutate(
        sim=ifelse(i==1, 1, sim)
    ) %>%
    group_by(sim, R0, i) %>%
    mutate(
        prevalence=sort(prevalence),
        j=seq_along(i)
    ) %>%
    group_by %>%
    mutate(
        sim=ifelse(i==5 & round(R0, 1)==6.8, 2, 1)
    ) %>%
    group_by(R0, i, j, sim) %>%
    summarize(
        prevalence=mean(prevalence)
    ) %>%
    as.data.frame
@

We can now pass this data to \texttt{ggplot} objects in order to overlay a different plot on top of the bifurcation diagram.
The following code illustrates how bifurcation diagrams are created

<<bifur_g>>===
gbifur <- ggplot(bifur_df) +
    geom_path(aes(R0, prevalence, group=interaction(i, j, sim), col=factor(i)), lwd=2) +
    scale_y_log10("Prevalence I/N", breaks=c(1e-3, 1e-4, 1e-5, 1e-6, 1e-7)) +
    scale_x_continuous("Basic reproductive number") +
    scale_color_manual(values=c(1, 1, 2, 3, 4, 5, 6)) +
    theme(
        legend.position = "none",
        panel.grid = element_blank()
    )
plot(gbifur)
@

\section{Probability of coherence in the deterministic model}

\section{Probability of extinction}

\section{Save results for inclusion in main paper}

\section{Time to generate this document}

<<echo=FALSE>>==
total.time <- proc.time() - start.time
cpu.seconds <- summary(total.time)["user"]
cpu.time.string <- as.character(lubridate::seconds_to_period(cpu.seconds))
@

CPU time to generate this document: \Sexpr{cpu.time.string} seconds

\end{document}